{"version":3,"sources":["webpack:///./src/pages/work/macgregor.js","webpack:///./src/components/Timeline/timeline.module.css","webpack:///./src/components/FullWidth/background.js","webpack:///./src/components/Timeline/timeline.js"],"names":["reversed","greyed","MacGregor","data","props","isMobile","useMedia","useState","showcaseIndex","setShowcaseIndex","currentShowcase","showcase","edges","find","edge","node","contentfulid","currentShowcaseImages","filter","x","renderImageAndText","title","description","image","key","imagePath","fluid","maxHeight","isReversed","includes","hasGreyBackground","className","pagesStyles","page","charSet","rel","href","currentPath","path","styles","macgregorHero","hero","subtitle","heroClassName","macgregorHeroImage","heroAlt","heroImage","linkBackTo","content","macgregorFeatures","tripleFeature","feature","map","index","svgPath","svgImage","file","url","paragraph","timeline","timelineItems","imageAndText","quote","findQuote","fullWidthBackground","height","bgColor","details","handlePreviousShowcase","length","handleNextShowcase","style","width","imgStyle","left","right","margin","objectFit","showcaseImagesLength","handleChangeShowcaseIndex","results","module","exports","FullWidthBackground","position","overflow","marginLeft","marginRight","Timeline","item","point","line","wrapper"],"mappings":"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","file":"component---src-pages-work-macgregor-js-eefcbcdd42b7545817f6.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { get } from 'lodash';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Feature from '../../components/Feature/feature';\nimport Footer from '../../components/Footer/footer';\nimport FullWidthBackground from '../../components/FullWidth/background';\nimport Header from '../../components/Header/header';\nimport Hero from '../../components/Hero/hero';\nimport ImageAndText from '../../components/ImageAndText/imageAndText';\nimport Quote from '../../components/Quote/quote';\nimport Results from '../../components/Results/results';\nimport MobileShowcase from '../../components/Showcase/mobileShowcase';\nimport Showcase from '../../components/Showcase/showcase';\nimport Timeline from '../../components/Timeline/timeline';\nimport useMedia from '../../hooks/useMedia';\nimport { findQuote } from '../../utils/helpers';\nimport pagesStyles from '../pages.module.css';\nimport styles from './work.module.css';\n\nconst reversed = [\n  'work:macgregor:imageAndText2',\n  'work:macgregor:imageAndText3',\n  'work:macgregor:imageAndText4',\n  'work:macgregor:imageAndText6',\n];\nconst greyed = ['work:macgregor:imageAndText2', 'work:macgregor:imageAndText3'];\n\nconst MacGregor = ({ data, ...props }) => {\n  const isMobile = useMedia('(max-width: 480px)');\n  const [showcaseIndex, setShowcaseIndex] = useState(0);\n\n  const currentShowcase = data.showcase.edges.find(\n    edge =>\n      edge.node.contentfulid === `work:macgregor:showcase${showcaseIndex + 1}`\n  );\n  const currentShowcaseImages = [\n    get(currentShowcase, 'node.images[0]'),\n    get(currentShowcase, 'node.images[1]'),\n  ].filter(x => !!x);\n\n  const handlePreviousShowcase = () => {\n    if (showcaseIndex === 0) {\n      setShowcaseIndex(data.showcase.edges.length - 1);\n    } else {\n      setShowcaseIndex(showcaseIndex - 1);\n    }\n  };\n\n  const handleNextShowcase = () => {\n    if (showcaseIndex === data.showcase.edges.length - 1) {\n      setShowcaseIndex(0);\n    } else {\n      setShowcaseIndex(showcaseIndex + 1);\n    }\n  };\n\n  const renderImageAndText = edge => {\n    if (\n      edge &&\n      edge.node &&\n      edge.node.contentfulid &&\n      edge.node.title &&\n      edge.node.description &&\n      edge.node.image\n    ) {\n      return (\n        <ImageAndText\n          key={edge.node.contentfulid}\n          title={edge.node.title}\n          description={edge.node.description}\n          imagePath={edge.node.image && edge.node.image.fluid}\n          maxHeight={500}\n          isReversed={reversed.includes(edge.node.contentfulid)}\n          hasGreyBackground={greyed.includes(edge.node.contentfulid)}\n        />\n      );\n    } else return null;\n  };\n\n  return (\n    <div className={pagesStyles.page}>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Neptune Studios | Case MacGregor</title>\n        <link\n          rel=\"canonical\"\n          href=\"https://neptunestudios.com/work/macgregor/\"\n        />\n      </Helmet>\n      <Header currentPath={props.path} />\n      <Hero\n        className={styles.macgregorHero}\n        title={data.hero.title}\n        subtitle={data.hero.subtitle}\n        description={data.hero.description}\n        heroClassName={styles.macgregorHeroImage}\n        heroAlt=\"Phone with MacGregor application\"\n        heroImage={data.hero?.image?.fluid}\n        linkBackTo=\"/work\"\n      />\n      <div className={pagesStyles.content}>\n        <div className={styles.macgregorFeatures}>\n          {data.tripleFeature.feature.map((feature, index) => (\n            <Feature\n              key={`${feature.title}:${index}`}\n              svgPath={feature.svgImage.file.url}\n              title={feature.title}\n              subtitle={feature.subtitle}\n              paragraph={feature.description.description}\n            />\n          ))}\n        </div>\n        <Timeline\n          title={data.timeline.title}\n          timelineItems={data.timeline.timelineItems}\n        />\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText1'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText2'\n          )\n        )}\n        <Quote quote={findQuote(data, 'work:macgregor:quotation1')} />\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText3'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText4'\n          )\n        )}\n        <FullWidthBackground\n          imagePath={\n            data.fullWidthBackground.image &&\n            data.fullWidthBackground.image.fluid\n          }\n          height={'54rem'}\n        />\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText5'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:macgregor:imageAndText6'\n          )\n        )}\n        {!isMobile && (\n          <Showcase\n            bgColor=\"#3D68B0\"\n            height={currentShowcaseImages[0].file.details.image.height / 2}\n            currentShowcase={currentShowcase}\n            handlePreviousShowcase={handlePreviousShowcase}\n            handleNextShowcase={handleNextShowcase}\n          >\n            {!!currentShowcaseImages.length && (\n              <>\n                <Img\n                  fluid={currentShowcaseImages[0].fluid}\n                  style={{ width: '40%' }}\n                  imgStyle={{\n                    width: '75%',\n                    height: '45rem',\n                    left: 0,\n                    right: 0,\n                    margin: '0 auto',\n                    objectFit: 'contain',\n                  }}\n                />\n                <Img\n                  fluid={currentShowcaseImages[1].fluid}\n                  style={{ width: '40%' }}\n                  imgStyle={{\n                    width: '75%',\n                    height: '45rem',\n                    left: 0,\n                    right: 0,\n                    margin: '0 auto',\n                    objectFit: 'contain',\n                  }}\n                />\n              </>\n            )}\n          </Showcase>\n        )}\n        {isMobile && (\n          <MobileShowcase\n            bgColor=\"#3D68B0\"\n            currentShowcase={currentShowcase}\n            showcaseIndex={showcaseIndex}\n            showcaseImagesLength={data.showcase.edges.length}\n            handleChangeShowcaseIndex={index => setShowcaseIndex(index)}\n          >\n            {!!currentShowcaseImages.length && (\n              <>\n                <Img\n                  fluid={currentShowcaseImages[0].fluid}\n                  style={{ width: '45%' }}\n                  imgStyle={{\n                    width: '90%',\n                    height: 'unset',\n                    left: 0,\n                    right: 0,\n                    margin: '0 auto',\n                    objectFit: 'contain',\n                  }}\n                />\n                <Img\n                  fluid={currentShowcaseImages[1].fluid}\n                  style={{ width: '45%' }}\n                  imgStyle={{\n                    width: '90%',\n                    height: 'unset',\n                    left: 0,\n                    right: 0,\n                    margin: '0 auto',\n                    objectFit: 'contain',\n                  }}\n                />\n              </>\n            )}\n          </MobileShowcase>\n        )}\n        <Quote quote={findQuote(data, 'work:macgregor:quotation2')} />\n        <Results results={data.results} />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default MacGregor;\n\nexport const query = graphql`\n  query {\n    hero: contentfulHero(contentfulid: { eq: \"work:macgregor:hero\" }) {\n      title\n      subtitle\n      description {\n        raw\n      }\n      image {\n        fluid {\n          ...GatsbyContentfulFluid_noBase64\n        }\n      }\n    }\n    tripleFeature: contentfulTripleFeature(\n      contentfulid: { eq: \"work:macgregor:triplefeature\" }\n    ) {\n      feature {\n        title\n        subtitle\n        description {\n          description\n        }\n        svgImage {\n          file {\n            url\n          }\n        }\n      }\n    }\n    timeline: contentfulTimeline(\n      contentfulid: { eq: \"work:macgregor:timeline\" }\n    ) {\n      title\n      timelineItems {\n        id\n        title\n        description\n      }\n    }\n    imageAndText: allContentfulImageAndText(\n      filter: { contentfulid: { regex: \"/work:macgregor:imageAndText/\" } }\n    ) {\n      edges {\n        node {\n          contentfulid\n          title\n          description {\n            raw\n          }\n          image {\n            fluid {\n              ...GatsbyContentfulFluid_noBase64\n            }\n          }\n        }\n      }\n    }\n    fullWidthBackground: contentfulFullWidthBackground(\n      contentfulid: { eq: \"work:macgregor:fullWidthBackground\" }\n    ) {\n      image {\n        fluid(maxWidth: 3800, quality: 100) {\n          ...GatsbyContentfulFluid_noBase64\n        }\n      }\n    }\n    showcase: allContentfulShowcase(\n      filter: { contentfulid: { regex: \"/work:macgregor:showcase/\" } }\n    ) {\n      edges {\n        node {\n          contentfulid\n          title\n          images {\n            fluid {\n              ...GatsbyContentfulFluid_noBase64\n            }\n            file {\n              details {\n                image {\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    quotation: allContentfulQuotation(\n      filter: { contentfulid: { regex: \"/work:macgregor:quotation/\" } }\n    ) {\n      edges {\n        node {\n          contentfulid\n          quote\n        }\n      }\n    }\n    results: contentfulResults(contentfulid: { eq: \"work:macgregor:results\" }) {\n      title\n      description {\n        raw\n      }\n      title2\n      description2\n      title3\n      description3\n      title4\n      description4\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeline\":\"timeline-module--timeline--20MtR\",\"item\":\"timeline-module--item--A7Dws\",\"title\":\"timeline-module--title--1JxYm\",\"description\":\"timeline-module--description--2U6HK\",\"point\":\"timeline-module--point--2Tx9w\",\"line\":\"timeline-module--line--3uv7B\",\"wrapper\":\"timeline-module--wrapper--MBdaZ\"};","import Img from 'gatsby-image';\nimport React from 'react';\nimport styles from './fullWidth.module.css';\nimport FullWidthGrey from './grey';\n\nconst FullWidthBackground = props => {\n  return (\n    <div className={styles.fullWidthBackground}>\n      <FullWidthGrey />\n      <Img\n        fluid={props.imagePath}\n        style={{\n          position: 'relative',\n          height: props.height || '40rem',\n          width: '100%',\n          overflow: 'visible',\n        }}\n        imgStyle={{\n          position: 'absolute',\n          height: '100%',\n          width: '100vw',\n          left: '50%',\n          right: '50%',\n          marginLeft: '-50vw',\n          marginRight: '-50vw',\n          objectFit: 'cover',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default FullWidthBackground;\n","import React from 'react';\nimport useMedia from '../../hooks/useMedia';\nimport CenterTitle from '../CenterTitle/centerTitle';\nimport FullWidthGrey from '../FullWidth/grey';\nimport styles from './timeline.module.css';\n\nconst Timeline = props => {\n  const isMobile = useMedia('(max-width: 480px)');\n  return (\n    <div className={styles.timeline}>\n      <FullWidthGrey />\n      <CenterTitle>{props.title}</CenterTitle>\n      {props.timelineItems.map(item => {\n        if (isMobile) {\n          return (\n            <div key={item.title} className={styles.item}>\n              <div className={styles.point} />\n              <div className={styles.line} />\n              <div className={styles.wrapper}>\n                <div className={styles.title}>{item.title}</div>\n                <div className={styles.description}>{item.description}</div>\n              </div>\n            </div>\n          );\n        } else\n          return (\n            <div key={item.title} className={styles.item}>\n              <div className={styles.title}>{item.title}</div>\n              <div className={styles.point} />\n              <div className={styles.line} />\n              <div className={styles.description}>{item.description}</div>\n            </div>\n          );\n      })}\n    </div>\n  );\n};\n\nexport default Timeline;\n"],"sourceRoot":""}