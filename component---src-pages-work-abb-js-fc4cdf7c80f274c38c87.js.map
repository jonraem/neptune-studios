{"version":3,"sources":["webpack:///./src/pages/work/abb.js"],"names":["reversed","greyed","ABB","data","props","isMobile","useMedia","useState","showcaseIndex","setShowcaseIndex","currentShowcase","showcase","edges","find","edge","node","contentfulid","currentShowcaseImage","renderImageAndText","title","description","image","key","imagePath","fluid","isReversed","includes","hasGreyBackground","className","pagesStyles","page","charSet","rel","href","currentPath","path","styles","abbHero","hero","subtitle","heroClassName","abbHeroImage","heroAlt","heroImage","linkBackTo","content","abbFeatures","tripleFeature","feature","map","index","svgPath","svgImage","file","url","paragraph","imageAndText","bgColor","height","details","handlePreviousShowcase","length","handleNextShowcase","style","width","imgStyle","left","right","margin","objectFit","showcaseImagesLength","handleChangeShowcaseIndex","quote","quotation","results","query"],"mappings":"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","file":"component---src-pages-work-abb-js-fc4cdf7c80f274c38c87.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { get } from 'lodash';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Feature from '../../components/Feature/feature';\nimport Footer from '../../components/Footer/footer';\nimport Header from '../../components/Header/header';\nimport Hero from '../../components/Hero/hero';\nimport ImageAndText from '../../components/ImageAndText/imageAndText';\nimport Quote from '../../components/Quote/quote';\nimport Results from '../../components/Results/results';\nimport MobileShowcase from '../../components/Showcase/mobileShowcase';\nimport Showcase from '../../components/Showcase/showcase';\nimport useMedia from '../../hooks/useMedia';\nimport pagesStyles from '../pages.module.css';\nimport styles from './work.module.css';\n\nconst reversed = ['work:abb:imageAndText2', 'work:abb:imageAndText4'];\nconst greyed = ['work:abb:imageAndText1', 'work:abb:imageAndText3'];\n\nconst ABB = ({ data, ...props }) => {\n  const isMobile = useMedia('(max-width: 480px)');\n  const [showcaseIndex, setShowcaseIndex] = useState(0);\n\n  const currentShowcase = data.showcase.edges.find(\n    edge => edge.node.contentfulid === `work:abb:showcase${showcaseIndex + 1}`\n  );\n  const currentShowcaseImage = get(currentShowcase, 'node.images[0]');\n\n  const handlePreviousShowcase = () => {\n    if (showcaseIndex === 0) {\n      setShowcaseIndex(data.showcase.edges.length - 1);\n    } else {\n      setShowcaseIndex(showcaseIndex - 1);\n    }\n  };\n\n  const handleNextShowcase = () => {\n    if (showcaseIndex === data.showcase.edges.length - 1) {\n      setShowcaseIndex(0);\n    } else {\n      setShowcaseIndex(showcaseIndex + 1);\n    }\n  };\n\n  const renderImageAndText = edge => {\n    if (\n      edge &&\n      edge.node &&\n      edge.node.contentfulid &&\n      edge.node.title &&\n      edge.node.description &&\n      edge.node.image\n    ) {\n      return (\n        <ImageAndText\n          key={edge.node.contentfulid}\n          title={edge.node.title}\n          description={edge.node.description}\n          imagePath={edge.node.image && edge.node.image.fluid}\n          isReversed={reversed.includes(edge.node.contentfulid)}\n          hasGreyBackground={greyed.includes(edge.node.contentfulid)}\n        />\n      );\n    } else return null;\n  };\n\n  return (\n    <div className={pagesStyles.page}>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Neptune Studios | Case ABB</title>\n        <link rel=\"canonical\" href=\"https://neptunestudios.com/work/abb\" />\n      </Helmet>\n      <Header currentPath={props.path} />\n      <Hero\n        className={styles.abbHero}\n        title={data.hero.title}\n        subtitle={data.hero.subtitle}\n        description={data.hero.description}\n        heroClassName={styles.abbHeroImage}\n        heroAlt=\"Tablets with ABB application\"\n        heroImage={data.hero?.image?.fluid}\n        linkBackTo=\"/work\"\n      />\n      <div className={pagesStyles.content}>\n        <div className={styles.abbFeatures}>\n          {data.tripleFeature.feature.map((feature, index) => (\n            <Feature\n              key={`${feature.title}:${index}`}\n              svgPath={feature.svgImage.file.url}\n              title={feature.title}\n              subtitle={feature.subtitle}\n              paragraph={feature.description.description}\n            />\n          ))}\n        </div>\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:abb:imageAndText1'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:abb:imageAndText2'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:abb:imageAndText3'\n          )\n        )}\n        {renderImageAndText(\n          data.imageAndText.edges.find(\n            edge => edge.node.contentfulid === 'work:abb:imageAndText4'\n          )\n        )}\n        {!isMobile && (\n          <Showcase\n            bgColor=\"#21B8BF\"\n            height={currentShowcaseImage.file.details.image.height + 240}\n            currentShowcase={currentShowcase}\n            handlePreviousShowcase={handlePreviousShowcase}\n            handleNextShowcase={handleNextShowcase}\n          >\n            {!!currentShowcaseImage && (\n              <Img\n                fluid={currentShowcaseImage.fluid}\n                style={{ width: '100%' }}\n                imgStyle={{\n                  width: '75%',\n                  height: 'unset',\n                  left: 0,\n                  right: 0,\n                  margin: '0 auto',\n                  objectFit: 'contain',\n                }}\n              />\n            )}\n          </Showcase>\n        )}\n        {isMobile && (\n          <MobileShowcase\n            bgColor=\"#21B8BF\"\n            height={currentShowcaseImage.file.details.image.height - 75}\n            currentShowcase={currentShowcase}\n            showcaseIndex={showcaseIndex}\n            showcaseImagesLength={data.showcase.edges.length}\n            handleChangeShowcaseIndex={index => setShowcaseIndex(index)}\n          >\n            {!!currentShowcaseImage && (\n              <Img\n                fluid={currentShowcaseImage.fluid}\n                style={{ width: '100%' }}\n                imgStyle={{\n                  width: '100%',\n                  height: 'unset',\n                  left: 0,\n                  right: 0,\n                  margin: '0 auto',\n                  objectFit: 'contain',\n                }}\n              />\n            )}\n          </MobileShowcase>\n        )}\n        <Quote quote={data.quotation} />\n        <Results results={data.results} />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default ABB;\n\nexport const query = graphql`\n  query {\n    hero: contentfulHero(contentfulid: { eq: \"work:abb:hero\" }) {\n      title\n      subtitle\n      description {\n        raw\n      }\n      image {\n        fluid {\n          ...GatsbyContentfulFluid_noBase64\n        }\n      }\n    }\n    tripleFeature: contentfulTripleFeature(\n      contentfulid: { eq: \"work:abb:triplefeature\" }\n    ) {\n      feature {\n        title\n        subtitle\n        description {\n          description\n        }\n        svgImage {\n          file {\n            url\n          }\n        }\n      }\n    }\n    imageAndText: allContentfulImageAndText(\n      filter: { contentfulid: { regex: \"/work:abb:imageAndText/\" } }\n    ) {\n      edges {\n        node {\n          contentfulid\n          title\n          description {\n            raw\n          }\n          image {\n            fluid {\n              ...GatsbyContentfulFluid_noBase64\n            }\n          }\n        }\n      }\n    }\n    showcase: allContentfulShowcase(\n      filter: { contentfulid: { regex: \"/work:abb:showcase/\" } }\n    ) {\n      edges {\n        node {\n          contentfulid\n          title\n          images {\n            fluid {\n              ...GatsbyContentfulFluid_noBase64\n            }\n            file {\n              details {\n                image {\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    quotation: contentfulQuotation(contentfulid: { eq: \"work:abb:quotation\" }) {\n      quote\n    }\n    results: contentfulResults(contentfulid: { eq: \"work:abb:results\" }) {\n      title\n      description {\n        raw\n      }\n      title2\n      description2\n      title3\n      description3\n      title4\n      description4\n    }\n  }\n`;\n"],"sourceRoot":""}